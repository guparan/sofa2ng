#!/usr/bin/env python
# -*- coding: utf-8 -*-
import json, os
from Cheetah.Template import Template
import bootstrap
from constructor import moveCodeAndPatch, patchNamespace, reorderCommands


package_dir = to_root + "/Sofa/Component/Utils"
context = {
                   "from_root" : from_root,
                    "src_from" : from_root + "/SofaKernel/modules/SofaComponentBase",
                "package_name" : "Sofa.Component.Utils",
                "package_type" : "library",
                "dependencies" : ["SofaCore"],
                 "package_dir" : package_dir,
             "package_dir_src" : package_dir + "/src",
          "package_dir_config" : package_dir + "/config",
      "package_dir_deprecated" : package_dir + "/deprecated_layout/SofaComponentBase",
                  "recipe_dir" : os.path.dirname(__file__),
          "package_components" : ["InfoComponent", "MakeAliasComponent", "MakeDataAliasComponent", "messageHandlerComponent"],
               "old_namespace" : ["sofa", "component"],
               "new_namespace" : ["sofa", "component", "utils"],
                "header_files" : [], # will be filled by moveCodeAndPatch
                "source_files" : [], # will be filled by moveCodeAndPatch
               
            "test_package_dir" : package_dir + "/tests",
                   "test_from" : from_root + "/SofaKernel/modules/SofaComponentBase/SofaComponentBase_test",
             "test_components" : ["MakeAliasComponent_test", "MakeDataAliasComponent_test", "MessageHandlerComponent_test"],
           "test_dependencies" : ["SofaTest", "SofaGTestMain"],
           "test_header_files" : [], # will be filled by moveCodeAndPatch
           "test_source_files" : [], # will be filled by moveCodeAndPatch
}
context["package_dir_src_with_namespace"] = context["package_dir_src"] + "/" + '/'.join(context["new_namespace"])


def fromFileToFile(file, context):
    return (
        context["src_from"] + "/" + file,                    # source
        context["package_dir_src"] + "/" +                   # destination
            '/'.join(context["new_namespace"]) + "/" + file
    )

def fromFileToFile_test(file, context):
    return (
        context["test_from"] + "/" + file,          # source
        context["test_package_dir"] + "/" + file    # destination
    )


########### INIT ############
tasks = []

tasks += [["generator", "init", context]]

tasks += [["mkdir", "${package_dir_src_with_namespace}", context]]
tasks += [["mkdir", "${package_dir_deprecated}", context]]
tasks += [["mkdir", "${test_package_dir}", context]]
tasks += [["mkdir", "${package_dir_config}", context]]
##########################


######## SOURCES #########
tasks += moveCodeAndPatch(context["package_components"], fromFileToFile, **context) # will set header_files and source_files
tasks += patchNamespace(context["package_dir_src"], **context)

#Â dirty patch to correct file name that does not follow conventions
tasks += [["move", "${package_dir_src_with_namespace}/messageHandlerComponent.cpp",     "${package_dir_src_with_namespace}/MessageHandlerComponent.cpp.tmp", context]]
tasks += [["move", "${package_dir_src_with_namespace}/messageHandlerComponent.h",       "${package_dir_src_with_namespace}/MessageHandlerComponent.h.tmp", context]]
tasks += [["rm",   "${package_dir_src_with_namespace}/messageHandlerComponent.h",       context]]
tasks += [["rm",   "${package_dir_src_with_namespace}/messageHandlerComponent.cpp",     context]]
tasks += [["move", "${package_dir_src_with_namespace}/MessageHandlerComponent.cpp.tmp", "${package_dir_src_with_namespace}/MessageHandlerComponent.cpp", context]]
tasks += [["move", "${package_dir_src_with_namespace}/MessageHandlerComponent.h.tmp",   "${package_dir_src_with_namespace}/MessageHandlerComponent.h", context]]
tasks += [["rm",   "${package_dir_src_with_namespace}/MessageHandlerComponent.h.tmp",   context]]
tasks += [["rm",   "${package_dir_src_with_namespace}/MessageHandlerComponent.cpp.tmp", context]]

tasks += [["generator", "generate-deprecatedlayout", context]]

tasks += [["replacetext", "${package_dir}", "messageHandlerComponent", "MessageHandlerComponent", context]]

tasks += [["generator", "generate-cmakelists", context]]
##########################


######### TESTS ##########
# reset properties for new CMakeLists generation
tasks += moveCodeAndPatch(context["test_components"], fromFileToFile_test, **context) # will set test_header_files and test_source_files
tasks += patchNamespace(context["test_package_dir"], **context)
tasks += [["generator", "generate-cmakelists-tests", context]]
##########################


######### CONFIG #########
tasks += [["generator", "generate-configfiles", context]]
##########################

# command = {"commands" : reorderCommands(tasks)}
command = {"commands" : tasks}


